use lexer::Indentifier;
use model::{Attribute, Class};

mod lexer;
mod model;
use model::View::*;
use model::{Function, Type};

// use crate::model::Function;

// TODO Read file and write file
// add super() in constructor
// impl Object trait
fn main() {
    let class = model::Class::build("Held", Public, true)
        .with_attribute(Attribute::new(Public, "st√§rke", Type::Other("int"), false))
        .with_attribute(Attribute::new(
            Public,
            "lebenspunkte",
            Type::Other("int"),
            false,
        ))
        .with_attribute(Attribute::new(
            Public,
            "angriffswert",
            Type::Other("int"),
            false,
        ))
        .with_attribute(Attribute::new(Public, "name", Type::Other("String"), false))
        .with_attribute(Attribute::new(Public, "waffe", Type::Other("Waffe"), false))
        .with_method(Function::new(
            "addLebenspunkte",
            Public,
            Type::Other("boolean"),
            vec![Attribute::new(Normal, "faktor", Type::Other("int"), true)],
            false,
        ));
    let idents = lexer::get_identifiers("/home/oskar/dev/rust/java2plantuml/test.puml");
    // for class in get_objects(&idents.unwrap()).iter() {
    //     write_class(class);
    // }
    println!("{}", class.as_string());
    println!("{:?}", idents);
    println!("{:?}", get_objects(&idents.unwrap()));
}

// TODO wait for start/enduml
fn get_objects<'a>(indents: &Vec<Indentifier>) -> Vec<Class<'a>> {
    let mut out = Vec::new();

    // skip until startuml
    let mut peed = indents.iter().peekable();
    loop {
        match peed.peek() {
            Some(_) => {
                match peed.next() {
                    Some(Indentifier::Class) => {},
                    None => ()
                }
            }
            None => break,
        }
    }
    out
}

fn write_class<'a>(class: &Class<'a>) {
    todo!()
}
